// Generated by CoffeeScript 1.10.0
var Bunny, Critter, Frog, Ghost,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Ghost = (function() {
  function Ghost() {
    var cover, shape;
    shape = new THREE.CylinderGeometry(50, 60, 100);
    cover = new THREE.MeshPhongMaterial();
    cover.emissive.setRGB(0.5, 0.5, 1);
    this.body = new THREE.Mesh(shape, cover);
    this.body.castShadow = true;
    shape = new THREE.SphereGeometry(50, 10, 10);
    cover = new THREE.MeshPhongMaterial();
    cover.emissive.setRGB(0.5, 0.5, 1);
    this.head = new THREE.Mesh(shape, cover);
    this.body.add(this.head);
    this.head.castShadow = true;
    shape = new THREE.TorusGeometry(100, 15, 10, 25, 2.14);
    cover = new THREE.MeshPhongMaterial();
    cover.emissive.setRGB(0.5, 0.5, 1);
    this.arms = new THREE.Mesh(shape, cover);
    this.body.add(this.arms);
    this.arms.castShadow = true;
  }

  Ghost.prototype.animate = function(t) {
    this.head.position.set(0, 50 + 5 * Math.sin(10 * t), 0);
    this.arms.position.set(0, -50 - 5 * Math.sin(10 * t), 0);
    this.arms.rotation.set(0, 0, 0.5);
    return this.body.position.set(100 * Math.sin(t), 90 * Math.cos(t), 200 * Math.sin(t));
  };

  return Ghost;

})();

Critter = (function() {
  function Critter() {
    var shape;
    this.running = false;
    this.offset = 0;
    this.surface = new THREE.MeshPhongMaterial();
    this.surface.emissive.setRGB(0.93, 0.8, 0.67);
    this.skin = Physijs.createMaterial(this.surface, 0.9, 0.2);
    shape = new THREE.SphereGeometry(36, 36, 36);
    this.body = new Physijs.BoxMesh(shape, this.skin);
    this.body.castShadow = true;
    shape = new THREE.SphereGeometry(24, 20, 20);
    this.head = new THREE.Mesh(shape, this.skin);
    this.head.castShadow = true;
    this.body.add(this.head);
    this.head.position.set(0, 20, 35);
    this.frontFeet = new THREE.Object3D();
    this.body.add(this.frontFeet);
    this.frontFeet.position.set(0, -30, 20);
    shape = new THREE.SphereGeometry(10, 15, 15);
    this.foot1 = new THREE.Mesh(shape, this.skin);
    this.foot1.castShadow = true;
    this.frontFeet.add(this.foot1);
    this.foot1.position.set(-15, 0, 0);
    shape = new THREE.SphereGeometry(10, 15, 15);
    this.foot2 = new THREE.Mesh(shape, this.skin);
    this.foot2.castShadow = true;
    this.frontFeet.add(this.foot2);
    this.foot2.position.set(15, 0, 0);
    this.backFeet = new THREE.Object3D();
    this.body.add(this.backFeet);
    this.backFeet.position.set(0, -27, -20);
    shape = new THREE.SphereGeometry(13, 15, 15);
    this.foot3 = new THREE.Mesh(shape, this.skin);
    this.foot3.castShadow = true;
    this.backFeet.add(this.foot3);
    this.foot3.position.set(-17, 0, 0);
    shape = new THREE.SphereGeometry(13, 15, 15);
    this.foot4 = new THREE.Mesh(shape, this.skin);
    this.foot4.castShadow = true;
    this.backFeet.add(this.foot4);
    this.foot4.position.set(17, 0, 0);
  }

  Critter.prototype.run = function(t, sidemotion) {
    var f1, f2, force, thrust;
    if (!this.running) {
      this.offset = -t;
      this.running = true;
      this.sidemotion = sidemotion;
      thrust = 0.1;
      f1 = new THREE.Vector3();
      f2 = new THREE.Vector3();
      force = new THREE.Vector3();
      f1.getPositionFromMatrix(this.foot1.matrixWorld);
      f2.getPositionFromMatrix(this.foot2.matrixWorld);
      force = f1.sub(f2);
      return force.multiplyScalar(self.sidemotion * thrust);
    }
  };

  Critter.prototype.animate = function(t) {
    var paced, stopped;
    stopped = 0.9 * Math.PI;
    paced = 8 * (t + this.offset - stopped);
    if (this.running) {
      if (paced < 4 * Math.PI) {
        return this.gallop(paced, stopped);
      } else {
        this.running = false;
        return this.looking = true;
      }
    } else if (this.looking) {
      if (paced < 12 * Math.PI) {
        return this.head.rotation.y = Math.sin(paced / 4);
      } else {
        this.head.rotation.y = 0;
        return this.looking = false;
      }
    }
  };

  Critter.prototype.gallop = function(paced, stopped) {
    var thrust;
    thrust = void 0;
    if (true) {
      thrust = 10 * Math.sin(paced + 0.66 + stopped);
      this.body.applyCentralImpulse(new THREE.Vector3(0, 4 * 1e6 * thrust, 1e6 * thrust));
      this.body.rotation.x = 5 * Math.sin(paced);
    }
    this.backFeet.position.y = -25 + 10 * Math.sin(paced + 2.87 + stopped);
    this.backFeet.position.z = -20 + 10 * Math.sin(paced + 2.87 + stopped);
    return this.frontFeet.position.y = -30 + 7 * Math.sin(paced + 0.66 + stopped);
  };

  return Critter;

})();

Bunny = (function(superClass) {
  extend(Bunny, superClass);

  function Bunny() {
    var cover, i, pcount, points, shape;
    Bunny.__super__.constructor.apply(this, arguments);
    shape = new THREE.SphereGeometry(10, 10, 10);
    this.tail = new THREE.Mesh(shape, this.skin);
    this.tail.castShadow = true;
    this.body.add(this.tail);
    this.tail.position.set(0, 0, -43);
    cover = new THREE.MeshPhongMaterial();
    cover.emissive.setRGB(0, 0, 0);
    shape = new THREE.SphereGeometry(5, 5, 5);
    this.eye1 = new THREE.Mesh(shape, cover);
    this.head.add(this.eye1);
    this.eye1.position.set(-10, 10, 20);
    cover = new THREE.MeshPhongMaterial();
    cover.emissive.setRGB(0, 0, 0);
    shape = new THREE.SphereGeometry(5, 5, 5);
    this.eye2 = new THREE.Mesh(shape, cover);
    this.head.add(this.eye2);
    this.eye2.position.set(10, 10, 20);
    cover = new THREE.MeshPhongMaterial();
    cover.emissive.setRGB(0.8, 0.3, 0.3);
    shape = new THREE.SphereGeometry(5, 5, 5);
    this.eye1 = new THREE.Mesh(shape, cover);
    this.head.add(this.eye1);
    this.eye1.position.set(0, 0, 25);
    points = [];
    pcount = 16;
    i = 0;
    while (i < pcount) {
      points.push(new THREE.Vector3(Math.sqrt(25 * (Math.sin(i * 0.2) + 0.2 * Math.sin(i * 0.4))), 0, 45 - 3 * i));
      i++;
    }
    shape = new THREE.LatheGeometry(points);
    this.ear1 = new THREE.Mesh(shape, this.skin);
    this.ear1.castShadow = true;
    this.head.add(this.ear1);
    this.ear1.rotation.x = -Math.PI / 2;
    this.ear1.position.set(10, 20, 10);
    this.ear2 = new THREE.Mesh(shape, this.skin);
    this.ear2.castShadow = true;
    this.head.add(this.ear2);
    this.ear2.rotation.x = -Math.PI / 2;
    this.ear2.position.set(-10, 20, 10);
  }

  Bunny.prototype.gallop = function(paced, stopped) {
    Bunny.__super__.gallop.call(this, paced, stopped);
    this.ear1.rotation.y = 0.2 + 0.25 * Math.sin(paced + 2.04 + stopped);
    return this.ear2.rotation.y = -0.2 - 0.25 * Math.sin(paced + 2.04 + stopped);
  };

  return Bunny;

})(Critter);

Frog = (function(superClass) {
  extend(Frog, superClass);

  function Frog() {
    var cover, shape;
    Frog.__super__.constructor.apply(this, arguments);
    cover = new THREE.MeshPhongMaterial();
    cover.emissive.setRGB(0, 0, 0);
    shape = new THREE.SphereGeometry(5, 5, 5);
    this.eye1 = new THREE.Mesh(shape, cover);
    this.head.add(this.eye1);
    this.eye1.position.set(-15, 15, 10);
    cover = new THREE.MeshPhongMaterial();
    cover.emissive.setRGB(0, 0, 0);
    shape = new THREE.SphereGeometry(5, 5, 5);
    this.eye2 = new THREE.Mesh(shape, cover);
    this.head.add(this.eye2);
    this.eye2.position.set(15, 15, 10);
    this.surface.emissive.setRGB(0.5, 0.9, 0.25);
  }

  return Frog;

})(Critter);
